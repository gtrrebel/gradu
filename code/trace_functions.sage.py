# This file was *autogenerated* from the file trace_functions.sage
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4)
RR = QQ['t, x, a, b, c, d, X11, X12, X22, X13, X23, X33, X14, X24, X34, X44, d_ab, d_ac, d_ad, d_bc, d_bd, d_cd']; (t, x, a, b, c, d, X11, X12, X22, X13, X23, X33, X14, X24, X34, X44, d_ab, d_ac, d_ad, d_bc, d_bd, d_cd,) = RR._first_ngens(22)
K = RR.fraction_field()

X = [[X11, X12, X13, X14], [X12, X22, X23, X24], [X13, X23, X33, X34], [X14, X24, X34, X44]]

ass = [a, b, c, d]
ds = [[_sage_const_0 , d_ab, d_ac, d_ad], [-d_ab, _sage_const_0 , d_bc, d_bd], [-d_ac, -d_bc, _sage_const_0 , d_cd], [-d_ad, -d_bd, -d_cd, _sage_const_0 ]]

k = _sage_const_4 
n = _sage_const_3 

vals = [[_sage_const_0  for __ in xrange(k - _sage_const_1 )] for _ in xrange(n - _sage_const_1 )]

def set_divided_difference(l, coeff):
	if (l[_sage_const_0 ] == l[-_sage_const_1 ]):
		return
	i_count = _sage_const_0 
	while (l[i_count] == l[_sage_const_0 ]):
		i_count += _sage_const_1 
	vals[l[_sage_const_0 ] - _sage_const_1 ][k - _sage_const_1  - i_count] += coeff


def open_divided_difference(l, coeff = _sage_const_1 ):
	l = sorted(l)
	if (l[_sage_const_0 ] + _sage_const_1  >= l[-_sage_const_1 ]):
		set_divided_difference(l, coeff)
	else:
		i = l[_sage_const_0 ]
		j = l[_sage_const_0 ] + _sage_const_1 
		ii = l[-_sage_const_1 ]
		coeff1 = ds[j - _sage_const_1 ][i - _sage_const_1 ]/ds[ii - _sage_const_1 ][i - _sage_const_1 ]
		coeff2 = ds[ii - _sage_const_1 ][j - _sage_const_1 ]/ds[ii - _sage_const_1 ][i - _sage_const_1 ]
		open_divided_difference(l[:-_sage_const_1 ] + [j], coeff1*coeff)
		open_divided_difference(l[_sage_const_1 :] + [j], coeff2*coeff)

def pprint(i, j):
	print "[",
	for ii in xrange(k - j - _sage_const_1 ):
		print ass[i], ", ",
	for ii in xrange(j):
		print ass[i + _sage_const_1 ], ", ",
	print ass[i + _sage_const_1 ], "]"

def print_table():
	for i in xrange(n - _sage_const_1 ):
		for j in xrange(k - _sage_const_1 ):
			pprint(i, j)
			print vals[i][j]

def fact(n):
	if (n == _sage_const_0 ):
		return _sage_const_1 
	return n*fact(n - _sage_const_1 )

def binom(n, k):
	if (n < k):
		return _sage_const_0 
	if (k < _sage_const_0 ):
		return _sage_const_0 
	return fact(n)/(fact(k)*fact(n - k))

def sum_table(l, d):
	if (d == _sage_const_0 ):
		return l
	ans = []
	ans.append(l[_sage_const_0 ])
	for i in xrange(len(l) - _sage_const_1 ):
		ans.append(l[i] + l[i + _sage_const_1 ])
	ans.append(l[-_sage_const_1 ])
	return sum_table(ans, d - _sage_const_1 )

def get_terms():
	return [vals[_sage_const_0 ][j]*binom(k - _sage_const_2 , j) for j in xrange(k - _sage_const_1 )]

def print_expanded_table_first(d = _sage_const_1 ):
	l = sum_table(get_terms(), d)
	for i in xrange(len(l)):
		print i
		print l[i]

def get_polynomial_i(i):
	ans = _sage_const_0 
	for j in xrange(i):
		z = (t + ds[_sage_const_0 ][j + _sage_const_1 ])/ds[j][j + _sage_const_1 ]
		w = _sage_const_1  - z
		for jj in xrange(k - _sage_const_1 ):
			ans += z**(k - _sage_const_2  - jj)*w**(jj)*binom(k - _sage_const_2 , jj)*vals[j][jj]
	return ans


def go(l = [], coeff = _sage_const_1 ):
	if (len(l) == k):
		open_divided_difference(l, coeff*X[l[_sage_const_0 ] - _sage_const_1 ][l[-_sage_const_1 ] - _sage_const_1 ])
		return
	for i in xrange(_sage_const_1 , n + _sage_const_1 ):
		coeff2 = _sage_const_1 
		if (len(l) > _sage_const_0 ):
			coeff2 *= X[l[-_sage_const_1 ] - _sage_const_1 ][i - _sage_const_1 ]
		go([x for x in l] + [i], coeff2*coeff)

def set_all_terms():
	go()

d = _sage_const_1 
set_all_terms()
print_table()
print get_polynomial_i(_sage_const_1 )
#print_expanded_table_first(d)
